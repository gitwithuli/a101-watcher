name: A101 Email Watcher (5 min)

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes (UTC)
  workflow_dispatch: {}

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      # System libraries Chromium needs (works on ubuntu-latest)
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 \
            libxtst6 libglib2.0-0 libgtk-3-0 libdrm2 libgbm1 libasound2 \
            libpangocairo-1.0-0 libxrandr2 libxfixes3 libpango-1.0-0 libcups2 \
            libxkbcommon0 libxshmfence1 libnspr4 libatk1.0-0 libatk-bridge2.0-0 \
            libatspi2.0-0 fonts-liberation

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install playwright

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium

      - name: Run watcher (inline Python)
        env:
          # Change to 'Apple' for a quick test; switch back after
          A101_URL: https://www.a101.com.tr/liste/a101-ekstra-apple
          SEARCH_TEXT: Apple iPhone 17 256 GB Cep
          # Map to the secrets you created (no underscores)
          SMTP_HOST: ${{ secrets.SMTPHOST }}
          SMTP_PORT: ${{ secrets.SMTPPORT }}
          SMTP_USER: ${{ secrets.SMTPUSER }}
          SMTP_PASS: ${{ secrets.SMTPPASS }}
          FROM_EMAIL: ${{ secrets.FROMEMAIL }}
          TO_EMAIL: ${{ secrets.TOEMAIL }}
          HEADLESS: "1"
        run: |
          python - << 'PY'
          import os, smtplib, sys, traceback, pathlib
          from email.message import EmailMessage
          from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout
          from datetime import datetime
          from zoneinfo import ZoneInfo

          URL         = os.getenv("A101_URL")
          SEARCH_TEXT = os.getenv("SEARCH_TEXT")
          HEADLESS    = os.getenv("HEADLESS", "1") == "1"

          SMTP_HOST   = os.getenv("SMTP_HOST")
          SMTP_PORT   = int((os.getenv("SMTP_PORT") or "587").strip())
          SMTP_USER   = os.getenv("SMTP_USER")
          SMTP_PASS   = os.getenv("SMTP_PASS")
          FROM_EMAIL  = os.getenv("FROM_EMAIL") or SMTP_USER
          TO_EMAIL    = os.getenv("TO_EMAIL") or SMTP_USER

          ART = pathlib.Path("artifacts"); ART.mkdir(exist_ok=True)

          def log(m): print(m, flush=True)

          def send_email(subject, body):
              try:
                  msg = EmailMessage()
                  msg["Subject"] = subject
                  msg["From"] = FROM_EMAIL
                  msg["To"] = TO_EMAIL
                  msg.set_content(body)
                  with smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=30) as s:
                      s.ehlo()
                      s.starttls()
                      s.login(SMTP_USER, SMTP_PASS)
                      s.send_message(msg)
                  log("[info] Email sent.")
              except Exception as e:
                  log(f"[warn] Email failed: {e}")
                  traceback.print_exc()

          def check():
              with sync_playwright() as p:
                  browser = p.chromium.launch(headless=HEADLESS)
                  ctx = browser.new_context(
                      user_agent=("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                                  "(KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"),
                      locale="tr-TR",
                      timezone_id="Europe/Istanbul",
                      viewport={"width": 1366, "height": 800},
                  )
                  page = ctx.new_page()
                  status = None
                  try:
                      resp = page.goto(URL, wait_until="domcontentloaded", timeout=60000)
                      status = resp.status if resp else None
                      log(f"[info] goto status={status}")

                      for sel in ['button:has-text("Kabul Et")','button:has-text("Tamam")',
                                  'button:has-text("Kapat")','button:has-text("Accept")']:
                          try:
                              page.locator(sel).first.click(timeout=1000)
                          except Exception:
                              pass
                      try:
                          page.wait_for_load_state("networkidle", timeout=45000)
                      except PWTimeout:
                          log("[warn] networkidle timeout; continuing")

                      html = page.content()
                      (ART / "page.html").write_text(html, encoding="utf-8")
                      try:
                          page.screenshot(path=str(ART / "page.png"), full_page=True)
                      except Exception:
                          pass

                      found = (SEARCH_TEXT in html) or (SEARCH_TEXT.lower() in html.lower())
                      if not found:
                          try:
                              found = page.locator(f"text={SEARCH_TEXT}").count() > 0
                          except Exception:
                              found = False
                      return found, status
                  finally:
                      ctx.close(); browser.close()

          try:
              found, status = check()
              now_tr = datetime.now(ZoneInfo("Europe/Istanbul")).strftime("%Y-%m-%d %H:%M:%S %Z")
              log(f"[info] Found={found}; http_status={status}; time={now_tr}")
              if found:
                  send_email(
                      f"[A101] MATCH PRESENT — {now_tr}",
                      f"✅ Phrase detected.\nPhrase: {SEARCH_TEXT}\nURL: {URL}\nHTTP: {status}\nTime: {now_tr}\n",
                  )
              else:
                  log("[info] No match; no email.")
              sys.exit(0)  # keep the job green so the schedule continues
          except Exception as e:
              log(f"[error] {e}")
              traceback.print_exc()
              sys.exit(0)
          PY

      - name: Upload debug artifacts (HTML + screenshot)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a101-debug
          path: artifacts/
          if-no-files-found: ignore
